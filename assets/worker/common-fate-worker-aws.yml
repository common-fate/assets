---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Common Fate worker quickstart v0.1.0"

Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Common Fate Configuration
        Parameters:
          - CommonFateWorkerTokenParameterStorePath
          - CommonFateWorkerTokenParameterStoreKMSKey
          - CommonFateWorkerToken
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - Subnets
          - AvailabilityZones
          - SecurityGroupId

      - Label:
          default: Worker Configuration
        Parameters:
          - WorkerImage
          - WorkerCpu
          - WorkerMemory
          - WorkerDesiredCount

Parameters:
  CommonFateWorkerToken:
    Description: Common Fate Worker Token. Or, preload it into SSM Parameter Store and use CommonFateWorkerTokenParameterStorePath for secure environments.
    Type: String
    NoEcho: true
    Default: ""

  CommonFateWorkerTokenParameterStorePath:
    Description: Existing SSM Parameter Store path to the Common Fate Worker Token (takes precedence over CommonFateWorkerToken). Expects a leading slash ('/').
    Type: String
    Default: ""
    AllowedPattern: "^$|^/[a-zA-Z0-9_.\\-/]+$"
    ConstraintDescription: "Expects a leading forward slash"

  CommonFateWorkerTokenParameterStoreKMSKey:
    Description: AWS KMS key ID used to encrypt the SSM parameter (if encrypted)
    Type: String
    Default: ""

  CommonFateAllowedCommands:
    Description: CLIs enabled
    Type: String
    Default: "aws"

  WorkerImage:
    Description: The Docker image to use for the worker
    Type: String
    Default: "commonfate/worker:latest"

  WorkerCpu:
    Description: The CPU allocation for the worker containers
    Type: String
    Default: "256"

  WorkerMemory:
    Description: The memory allocation for the worker containers
    Type: String
    Default: "512"

  WorkerDesiredCount:
    Description: The desired count of worker tasks to run
    Type: Number
    Default: "1"
    MinValue: "1"

  VpcId:
    Type: String
    Description: Optional - Id of an existing VPC to launch ECS tasks into. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of two existing VPC subnet ids where ECS tasks will run. Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of AZs that subnets are created in (if Subnets parameter is not specified)
    Default: ""

  SecurityGroupId:
    Type: String
    Description: Optional - Comma separated list of security group ids to assign to ECS tasks
    Default: ""

  ManagedPolicyARN:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of managed IAM policy ARNs to attach to the instance role
    Default: "arn:aws:iam::aws:policy/AdministratorAccess"

  WorkerRoleName:
    Type: String
    Description: Optional - A name for the IAM Role attached to the worker task
    Default: ""

  WorkerRolePermissionsBoundaryARN:
    Type: String
    Description: The ARN of the policy used to set the permissions boundary for the role.
    Default: ""

  EnableCostAllocationTags:
    Type: String
    Description: Enables AWS Cost Allocation tags for all resources in the stack. See https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  CostAllocationTagName:
    Type: String
    Description: The name of the Cost Allocation Tag used for billing purposes
    Default: "CreatedBy"

  CostAllocationTagValue:
    Type: String
    Description: The value of the Cost Allocation Tag used for billing purposes
    Default: "common-fate-worker-quickstart"

Rules:
  HasToken:
    Assertions:
      - Assert: !Or
          - !Not
            - !Equals
              - !Ref CommonFateWorkerToken
              - ""
          - !Not
            - !Equals
              - !Ref CommonFateWorkerTokenParameterStorePath
              - ""
        AssertDescription: "You must provide CommonFateWorkerToken or CommonFateWorkerTokenParameterStorePath"

Outputs:
  VpcId:
    Value: !If [CreateVpcResources, !Ref Vpc, !Ref VpcId]
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  WorkerRoleName:
    Value: !Ref IAMRole
    Export:
      Name: !Sub "${AWS::StackName}-WorkerRoleName"

Conditions:
  CreateVpcResources: !Equals [!Ref VpcId, ""]
  CreateSecurityGroup: !Equals [!Ref SecurityGroupId, ""]
  SetWorkerRoleName: !Not [!Equals [!Ref WorkerRoleName, ""]]
  SetWorkerRolePermissionsBoundaryARN:
    !Not [!Equals [!Ref WorkerRolePermissionsBoundaryARN, ""]]
  UseSpecifiedAvailabilityZones:
    !Not [!Equals [!Join ["", !Ref AvailabilityZones], ""]]
  UseManagedPolicyARN: !Not [!Equals [!Join ["", !Ref ManagedPolicyARN], ""]]
  UseCustomerManagedParameterPath:
    !Not [!Equals [!Ref CommonFateWorkerTokenParameterStorePath, ""]]
  UseCustomerManagedKeyForParameterStore:
    !Not [!Equals [!Ref CommonFateWorkerTokenParameterStoreKMSKey, ""]]
  CreateAgentTokenParameter:
    !Equals [!Ref CommonFateWorkerTokenParameterStorePath, ""]
  UseCostAllocationTags: !Equals [!Ref EnableCostAllocationTags, "true"]
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpcResources
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  Gateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpcResources
    Properties:
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpcResources
    Properties:
      InternetGatewayId: !Ref Gateway
      VpcId: !Ref Vpc

  Subnet0:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    DependsOn:
      - GatewayAttachment
    Properties:
      AvailabilityZone: !If
        - "UseSpecifiedAvailabilityZones"
        - !Select [0, !Ref AvailabilityZones]
        - !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  Subnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    DependsOn:
      - GatewayAttachment
    Properties:
      AvailabilityZone: !If
        - "UseSpecifiedAvailabilityZones"
        - !Select [1, !Ref AvailabilityZones]
        - !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  Routes:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcResources
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  RouteDefault:
    Type: AWS::EC2::Route
    Condition: CreateVpcResources
    DependsOn:
      - GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Gateway
      RouteTableId: !Ref Routes

  Subnet0Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: !Ref Subnet0
      RouteTableId: !Ref Routes

  Subnet1Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref Routes

  # A resource that depends on the leaf nodes of the VPC configuration so that
  # a strict ordering can be established on teardown.
  VpcComplete:
    Type: AWS::CloudFormation::WaitConditionHandle
    Metadata:
      VpcResources: !If
        - CreateVpcResources
        - [!Ref RouteDefault, !Ref Subnet0Routes, !Ref Subnet1Routes]
        - !Ref "AWS::NoValue"

  CommonFateWorkerTokenParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateAgentTokenParameter
    Properties:
      Name: !Sub "/${AWS::StackName}/common-fate/worker-token"
      Type: String
      Value: !Ref CommonFateWorkerToken

  Cluster:
    Type: AWS::ECS::Cluster

  ClusterCapacityProvider:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - FARGATE
      Cluster:
        Ref: Cluster
      DefaultCapacityProviderStrategy: []

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !If [
          SetWorkerRoleName,
          !Ref WorkerRoleName,
          !Sub "${AWS::StackName}-Role",
        ]
      PermissionsBoundary:
        !If [
          SetWorkerRolePermissionsBoundaryARN,
          !Ref WorkerRolePermissionsBoundaryARN,
          !Ref "AWS::NoValue",
        ]
      ManagedPolicyArns:
        - !If
          - UseManagedPolicyARN
          - !Join [",", !Ref ManagedPolicyARN]
          - !Ref "AWS::NoValue"
      Policies:
        - !If
          - UseCustomerManagedKeyForParameterStore
          - PolicyName: DecryptAgentToken
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${CommonFateWorkerTokenParameterStoreKMSKey}
          - !Ref "AWS::NoValue"
        - PolicyName: ReadAgentToken
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub
                  - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterPath}
                  - ParameterPath:
                      !If [
                        UseCustomerManagedParameterPath,
                        !Ref CommonFateWorkerTokenParameterStorePath,
                        !Ref CommonFateWorkerTokenParameter,
                      ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: sts:AssumeRole
      Path: /

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      GroupDescription: Common Fate worker security group
      VpcId: !If ["CreateVpcResources", !Ref Vpc, !Ref VpcId]
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  WorkerLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  TaskDefExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"

  TaskDefExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - WorkerLogGroup
                - Arn
        Version: "2012-10-17"
      PolicyName: TaskDefExecutionRoleDefaultPolicy
      Roles:
        - Ref: TaskDefExecutionRole
  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: WORKER_TOKEN
              Value:
                Ref: CommonFateWorkerToken
            - Name: ALLOWED_COMMANDS
              Value:
                Ref: CommonFateAllowedCommands
          Essential: true
          Image:
            Ref: WorkerImage
          Name: Worker
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: WorkerLogGroup
              awslogs-stream-prefix: worker
              awslogs-region:
                Ref: AWS::Region
      Cpu:
        Ref: WorkerCpu
      Family: FargateStackTaskDef
      Memory:
        Ref: WorkerMemory
      NetworkMode: awsvpc
      ExecutionRoleArn:
        Fn::GetAtt:
          - TaskDefExecutionRole
          - Arn
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - IAMRole
          - Arn

  Service:
    Type: AWS::ECS::Service
    Properties:
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Cluster:
        Ref: Cluster
      DesiredCount:
        Ref: WorkerDesiredCount
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt:
                - SecurityGroup
                - GroupId
          Subnets:
            - !Ref Subnet0
            - !Ref Subnet1
      TaskDefinition:
        Ref: TaskDef
